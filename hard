//Arduino controlled pumpkin complete code

#include <Adafruit_NeoPixel.h> // This includes the adafruit library for the neopixel LED ring

#define PIN            5 // This tells the arduino that we will be using pin 5

#define NUMPIXELS      12 // This is defining a global variable, basically telling the arduino that our LED ring has 12 individual LEDs

#define BRIGHTNESS      5  // This sets the brightness of the LEDs (range of 0 to 500)

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800); // LED initialization

int delayval = 500; // Delay for half a second

float colarray[NUMPIXELS * 3]; //Defines an array of size NUMPIXLES * 3 for an RGB value (3 different values) for each of the LEDs

void setup() // Setup function
{
  pixels.setBrightness(BRIGHTNESS);  // Self-explanatory
  pixels.begin(); // This initializes the NeoPixel library
  
  // Below I initialize all 36 values in colarray to be an equal gradient of all colors of the rainbow (red to purple)
  
  colarray[0] = 255; colarray[1] = 0; colarray[2] = 0;
  colarray[3] = 255; colarray[4] = 255 * .33; colarray[5] = 0;
  colarray[6] = 255; colarray[7] = 255 * .66; colarray[8] = 0;

  colarray[9] = 255; colarray[10] = 255; colarray[11] = 0;
  colarray[12] = 255 * .66; colarray[13] = 255; colarray[14] = 0;
  colarray[15] = 255 * .33; colarray[16] = 255; colarray[17] = 0;

  colarray[18] = 0; colarray[19] = 255; colarray[20] = 0;
  colarray[21] = 0; colarray[22] = 255 * .66; colarray[23] = 255 * .33;
  colarray[24] = 0; colarray[25] = 255 * .33; colarray[26] = 255 * .66;
  
  colarray[27] = 0; colarray[28] = 0; colarray[29] = 255;
  colarray[30] = 255 * .33; colarray[31] = 0; colarray[32] = 255 * .66;
  colarray[33] = 255 * .66; colarray[34] = 0; colarray[35] = 255 * .33;
}

void setPixelColors(float r, float g, float b)    // This is a helper function which sets every LED to a certain color and then illuminates the LEDs
{
  for (int i = 0; i < NUMPIXELS; i++)
  {
    pixels.setPixelColor(i, pixels.Color(r, g, b));
    pixels.show();
  }
}

void blueAndGreenYayBreath()    // Give the effect of breathing between two colors (I chose green and blue). Colors can be easily changed by looking up the rgb values for different colors.
{                               // Ask me for assistance if needed! I'm happy to help :)
  pixels.setBrightness(BRIGHTNESS);

  for (int i = 1; i < NUMPIXELS; i = i + 2) {
    pixels.setPixelColor(i, pixels.Color(0, 255, 0));
    pixels.show();
  }
  //Even pixels breath
  for (int rB = 150; rB < 255; rB++) {
    for (int i = 0; i < NUMPIXELS; i = i + 2) {
      pixels.setPixelColor(i, pixels.Color(0, rB, rB - 120));
    }
    pixels.show();
    delay(20);
  }
  for (int rB = 255; rB > 150; rB--) {
    for (int i = 0; i < NUMPIXELS; i = i + 2) {
      pixels.setPixelColor(i, pixels.Color(0, rB, rB - 120));
    }
    pixels.show();
    delay(20);
  }
}

void woopWoopthePolice()      // Simulates a police siren
{
  pixels.setBrightness(BRIGHTNESS);

  //Police effect
}

void Snake()              // Creates a snake effect of all the colors rotating giving the illusion of a snake running around the LED ring fast
{
  pixels.setBrightness(BRIGHTNESS);
  
  // You code here
}

void fast()   // Transitions through all the colors in a solid fashion from red to purple fast
{
  pixels.setBrightness(BRIGHTNESS);

  //Fast transition
  for (int i = 0; i < 255; i = i + 4)
  {
    setPixelColors(255, i, 0);
    pixels.show();
  }
  for (int i = 0; i < 255; i = i + 4)
  {
    setPixelColors(255 - i, 255, 0);
    pixels.show();
  }
  for (int i = 0; i < 255; i = i + 4)
  {
    setPixelColors(0, 255 - i, i);
    pixels.show();
  }
  for (int i = 0; i < 255; i = i + 4)
  {
    setPixelColors(i, 0, 255 - i);
    pixels.show();
  }
}


void slow()       // Transitions through all the colors in a solid fashion from red to purple slow
{
  pixels.setBrightness(BRIGHTNESS);
  
  //Slow transition
  for (float i = 0; i != 255; i = i + 0.01)
  {
    setPixelColors(255, i, 0);
    pixels.show();
  }
  for (float i = 0; i != 255; i = i + 0.01)
  {
    setPixelColors(255 - i, 255, 0);
    pixels.show();
  }
  for (float i = 0; i != 255; i = i + 0.01)
  {
    setPixelColors(0, 255 - i, i);
    pixels.show();
  }
  for (float i = 0; i != 255; i = i + 0.01)
  {
    setPixelColors(i, 0, 255 - i);
    pixels.show();
  }
}

void RaVeMoDe()   // Rapidly cycles through all the colors in a strobe-like fashion
{
  pixels.setBrightness(BRIGHTNESS);

  for (int i = 0; i < NUMPIXELS; i++)
    {
      setPixelColors(255, 0, 0);
      pixels.show();
    }
    for (int i = 0; i < NUMPIXELS; i++)
    {
      setPixelColors(255, 127, 0);
      pixels.show();
    }
    for (int i = 0; i < NUMPIXELS; i++)
    {
      setPixelColors(255, 255, 0);
      pixels.show();
    }
    for (int i = 0; i < NUMPIXELS; i++)
    {
      setPixelColors(0, 255, 0);
      pixels.show();
    }
    for (int i = 0; i < NUMPIXELS; i++)
    {
      setPixelColors(0, 0, 255);
      pixels.show();
    }
    for (int i = 0; i < NUMPIXELS; i++)
    {
      setPixelColors(148, 0, 211);
      pixels.show();
    }
}

void loop()  // Our main function. Choose which effect you would like and then enter it below in the same manner as my commented example below
{
  Snake();
}
